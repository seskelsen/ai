[
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "tree",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "tree",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "tree",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "tree",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "resultados",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095738",
        "description": ".history.MetricasMatrixConfusao_20240614095738",
        "peekOfCode": "resultados = [\n    {\"real\": \"positivo\", \"predito\": \"positivo\"},\n    {\"real\": \"negativo\", \"predito\": \"positivo\"},\n    {\"real\": \"positivo\", \"predito\": \"negativo\"},\n    {\"real\": \"negativo\", \"predito\": \"negativo\"}\n    # Adicione mais resultados aqui...\n]\n# Inicializando contadores\nTP, FN, FP, TN = 0, 0, 0, 0\n# Contando os valores",
        "detail": ".history.MetricasMatrixConfusao_20240614095738",
        "documentation": {}
    },
    {
        "label": "matriz_confusao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095738",
        "description": ".history.MetricasMatrixConfusao_20240614095738",
        "peekOfCode": "matriz_confusao = [\n    [TP, FN],\n    [FP, TN]\n]\n# Calculando as métricas\nacuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados",
        "detail": ".history.MetricasMatrixConfusao_20240614095738",
        "documentation": {}
    },
    {
        "label": "acuracia",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095738",
        "description": ".history.MetricasMatrixConfusao_20240614095738",
        "peekOfCode": "acuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095738",
        "documentation": {}
    },
    {
        "label": "precisao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095738",
        "description": ".history.MetricasMatrixConfusao_20240614095738",
        "peekOfCode": "precisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095738",
        "documentation": {}
    },
    {
        "label": "revocacao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095738",
        "description": ".history.MetricasMatrixConfusao_20240614095738",
        "peekOfCode": "revocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095738",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095738",
        "description": ".history.MetricasMatrixConfusao_20240614095738",
        "peekOfCode": "f1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095738",
        "documentation": {}
    },
    {
        "label": "resultados",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095824",
        "description": ".history.MetricasMatrixConfusao_20240614095824",
        "peekOfCode": "resultados = [\n    {\"real\": \"positivo\", \"predito\": \"positivo\"},\n    {\"real\": \"negativo\", \"predito\": \"positivo\"},\n    {\"real\": \"positivo\", \"predito\": \"negativo\"},\n    {\"real\": \"negativo\", \"predito\": \"negativo\"}\n    # Adicione mais resultados aqui...\n]\n# Inicializando contadores\nTP, FN, FP, TN = 0, 0, 0, 0\n# Contando os valores",
        "detail": ".history.MetricasMatrixConfusao_20240614095824",
        "documentation": {}
    },
    {
        "label": "matriz_confusao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095824",
        "description": ".history.MetricasMatrixConfusao_20240614095824",
        "peekOfCode": "matriz_confusao = [\n    [TP, FN],\n    [FP, TN]\n]\n# Calculando as métricas\nacuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados",
        "detail": ".history.MetricasMatrixConfusao_20240614095824",
        "documentation": {}
    },
    {
        "label": "acuracia",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095824",
        "description": ".history.MetricasMatrixConfusao_20240614095824",
        "peekOfCode": "acuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095824",
        "documentation": {}
    },
    {
        "label": "precisao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095824",
        "description": ".history.MetricasMatrixConfusao_20240614095824",
        "peekOfCode": "precisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095824",
        "documentation": {}
    },
    {
        "label": "revocacao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095824",
        "description": ".history.MetricasMatrixConfusao_20240614095824",
        "peekOfCode": "revocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095824",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095824",
        "description": ".history.MetricasMatrixConfusao_20240614095824",
        "peekOfCode": "f1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095824",
        "documentation": {}
    },
    {
        "label": "resultados",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095905",
        "description": ".history.MetricasMatrixConfusao_20240614095905",
        "peekOfCode": "resultados = [\n    {\"real\": \"positivo\", \"predito\": \"positivo\"},\n    {\"real\": \"negativo\", \"predito\": \"positivo\"},\n    {\"real\": \"positivo\", \"predito\": \"negativo\"},\n    {\"real\": \"negativo\", \"predito\": \"negativo\"}\n    # Adicione mais resultados aqui...\n]\n# Inicializando contadores\nTP, FN, FP, TN = 0, 0, 0, 0\n# Contando os valores",
        "detail": ".history.MetricasMatrixConfusao_20240614095905",
        "documentation": {}
    },
    {
        "label": "matriz_confusao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095905",
        "description": ".history.MetricasMatrixConfusao_20240614095905",
        "peekOfCode": "matriz_confusao = [\n    [TP, FN],\n    [FP, TN]\n]\n# Calculando as métricas\nacuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados",
        "detail": ".history.MetricasMatrixConfusao_20240614095905",
        "documentation": {}
    },
    {
        "label": "acuracia",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095905",
        "description": ".history.MetricasMatrixConfusao_20240614095905",
        "peekOfCode": "acuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095905",
        "documentation": {}
    },
    {
        "label": "precisao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095905",
        "description": ".history.MetricasMatrixConfusao_20240614095905",
        "peekOfCode": "precisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095905",
        "documentation": {}
    },
    {
        "label": "revocacao",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095905",
        "description": ".history.MetricasMatrixConfusao_20240614095905",
        "peekOfCode": "revocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095905",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "kind": 5,
        "importPath": ".history.MetricasMatrixConfusao_20240614095905",
        "description": ".history.MetricasMatrixConfusao_20240614095905",
        "peekOfCode": "f1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": ".history.MetricasMatrixConfusao_20240614095905",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616213948",
        "description": ".history.arvorededecisao_20240616213948",
        "peekOfCode": "data = load_iris()\nX = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)",
        "detail": ".history.arvorededecisao_20240616213948",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616213948",
        "description": ".history.arvorededecisao_20240616213948",
        "peekOfCode": "X = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)",
        "detail": ".history.arvorededecisao_20240616213948",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616213948",
        "description": ".history.arvorededecisao_20240616213948",
        "peekOfCode": "y = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")",
        "detail": ".history.arvorededecisao_20240616213948",
        "documentation": {}
    },
    {
        "label": "clf",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616213948",
        "description": ".history.arvorededecisao_20240616213948",
        "peekOfCode": "clf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616213948",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616213948",
        "description": ".history.arvorededecisao_20240616213948",
        "peekOfCode": "y_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616213948",
        "documentation": {}
    },
    {
        "label": "accuracy",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616213948",
        "description": ".history.arvorededecisao_20240616213948",
        "peekOfCode": "accuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616213948",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214254",
        "description": ".history.arvorededecisao_20240616214254",
        "peekOfCode": "data = load_iris()\nX = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)",
        "detail": ".history.arvorededecisao_20240616214254",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214254",
        "description": ".history.arvorededecisao_20240616214254",
        "peekOfCode": "X = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)",
        "detail": ".history.arvorededecisao_20240616214254",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214254",
        "description": ".history.arvorededecisao_20240616214254",
        "peekOfCode": "y = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")",
        "detail": ".history.arvorededecisao_20240616214254",
        "documentation": {}
    },
    {
        "label": "clf",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214254",
        "description": ".history.arvorededecisao_20240616214254",
        "peekOfCode": "clf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616214254",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214254",
        "description": ".history.arvorededecisao_20240616214254",
        "peekOfCode": "y_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616214254",
        "documentation": {}
    },
    {
        "label": "accuracy",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214254",
        "description": ".history.arvorededecisao_20240616214254",
        "peekOfCode": "accuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616214254",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214532",
        "description": ".history.arvorededecisao_20240616214532",
        "peekOfCode": "data = load_iris()\nX = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)",
        "detail": ".history.arvorededecisao_20240616214532",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214532",
        "description": ".history.arvorededecisao_20240616214532",
        "peekOfCode": "X = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)",
        "detail": ".history.arvorededecisao_20240616214532",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214532",
        "description": ".history.arvorededecisao_20240616214532",
        "peekOfCode": "y = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")",
        "detail": ".history.arvorededecisao_20240616214532",
        "documentation": {}
    },
    {
        "label": "clf",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214532",
        "description": ".history.arvorededecisao_20240616214532",
        "peekOfCode": "clf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616214532",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214532",
        "description": ".history.arvorededecisao_20240616214532",
        "peekOfCode": "y_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616214532",
        "documentation": {}
    },
    {
        "label": "accuracy",
        "kind": 5,
        "importPath": ".history.arvorededecisao_20240616214532",
        "description": ".history.arvorededecisao_20240616214532",
        "peekOfCode": "accuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": ".history.arvorededecisao_20240616214532",
        "documentation": {}
    },
    {
        "label": "entropy",
        "kind": 2,
        "importPath": ".history.entropy_20250720211327",
        "description": ".history.entropy_20250720211327",
        "peekOfCode": "def entropy(labels):\n    # Calcula as proporções de cada classe\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    # Calcula a entropia\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return entropy\n# Exemplo de uso\nlabels = ['False', 'False', 'False', 'True', 'True', 'True', 'True', 'True']\n#print(\"Entropia:\", entropy(labels))",
        "detail": ".history.entropy_20250720211327",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".history.entropy_20250720211327",
        "description": ".history.entropy_20250720211327",
        "peekOfCode": "labels = ['False', 'False', 'False', 'True', 'True', 'True', 'True', 'True']\n#print(\"Entropia:\", entropy(labels))\nresult = entropy(labels)\nprint(\"Entropia: {result}\")",
        "detail": ".history.entropy_20250720211327",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": ".history.entropy_20250720211327",
        "description": ".history.entropy_20250720211327",
        "peekOfCode": "result = entropy(labels)\nprint(\"Entropia: {result}\")",
        "detail": ".history.entropy_20250720211327",
        "documentation": {}
    },
    {
        "label": "resultados",
        "kind": 5,
        "importPath": "MetricasMatrizConfusao",
        "description": "MetricasMatrizConfusao",
        "peekOfCode": "resultados = [\n    {\"real\": \"positivo\", \"predito\": \"positivo\"},\n    {\"real\": \"negativo\", \"predito\": \"positivo\"},\n    {\"real\": \"positivo\", \"predito\": \"negativo\"},\n    {\"real\": \"negativo\", \"predito\": \"negativo\"}\n    # Adicione mais resultados aqui...\n]\n# Inicializando contadores\nTP, FN, FP, TN = 0, 0, 0, 0\n# Contando os valores",
        "detail": "MetricasMatrizConfusao",
        "documentation": {}
    },
    {
        "label": "matriz_confusao",
        "kind": 5,
        "importPath": "MetricasMatrizConfusao",
        "description": "MetricasMatrizConfusao",
        "peekOfCode": "matriz_confusao = [\n    [TP, FN],\n    [FP, TN]\n]\n# Calculando as métricas\nacuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados",
        "detail": "MetricasMatrizConfusao",
        "documentation": {}
    },
    {
        "label": "acuracia",
        "kind": 5,
        "importPath": "MetricasMatrizConfusao",
        "description": "MetricasMatrizConfusao",
        "peekOfCode": "acuracia = (TP + TN) / (TP + FN + FP + TN)\nprecisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": "MetricasMatrizConfusao",
        "documentation": {}
    },
    {
        "label": "precisao",
        "kind": 5,
        "importPath": "MetricasMatrizConfusao",
        "description": "MetricasMatrizConfusao",
        "peekOfCode": "precisao = TP / (TP + FP)\nrevocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": "MetricasMatrizConfusao",
        "documentation": {}
    },
    {
        "label": "revocacao",
        "kind": 5,
        "importPath": "MetricasMatrizConfusao",
        "description": "MetricasMatrizConfusao",
        "peekOfCode": "revocacao = TP / (TP + FN)\nf1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": "MetricasMatrizConfusao",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "kind": 5,
        "importPath": "MetricasMatrizConfusao",
        "description": "MetricasMatrizConfusao",
        "peekOfCode": "f1_score = 2 * (precisao * revocacao) / (precisao + revocacao)\n# Exibindo os resultados\nprint(\"Matriz de Confusão:\", matriz_confusao)\nprint(\"Acurácia:\", acuracia)\nprint(\"Precisão:\", precisao)\nprint(\"Revocação:\", revocacao)\nprint(\"F1-Score:\", f1_score)",
        "detail": "MetricasMatrizConfusao",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "arvorededecisao",
        "description": "arvorededecisao",
        "peekOfCode": "data = load_iris()\nX = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)",
        "detail": "arvorededecisao",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "arvorededecisao",
        "description": "arvorededecisao",
        "peekOfCode": "X = data.data\ny = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)",
        "detail": "arvorededecisao",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "arvorededecisao",
        "description": "arvorededecisao",
        "peekOfCode": "y = data.target\n# Dividir o conjunto de dados em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Construir o classificador de árvore de decisão\nclf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")",
        "detail": "arvorededecisao",
        "documentation": {}
    },
    {
        "label": "clf",
        "kind": 5,
        "importPath": "arvorededecisao",
        "description": "arvorededecisao",
        "peekOfCode": "clf = DecisionTreeClassifier(criterion='entropy')\nclf.fit(X_train, y_train)\n# Previsão e avaliação\ny_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": "arvorededecisao",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "arvorededecisao",
        "description": "arvorededecisao",
        "peekOfCode": "y_pred = clf.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": "arvorededecisao",
        "documentation": {}
    },
    {
        "label": "accuracy",
        "kind": 5,
        "importPath": "arvorededecisao",
        "description": "arvorededecisao",
        "peekOfCode": "accuracy = np.mean(y_pred == y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")\n# Visualizar a árvore de decisão\nplt.figure(figsize=(20,10))\ntree.plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)\nplt.show()",
        "detail": "arvorededecisao",
        "documentation": {}
    },
    {
        "label": "entropy",
        "kind": 2,
        "importPath": "entropy",
        "description": "entropy",
        "peekOfCode": "def entropy(labels):\n    # Calcula as proporções de cada classe\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    # Calcula a entropia\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return entropy\n# Exemplo de uso\nlabels = ['False', 'False', 'False', 'True', 'True', 'True', 'True', 'True']\n#print(\"Entropia:\", entropy(labels))",
        "detail": "entropy",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "entropy",
        "description": "entropy",
        "peekOfCode": "labels = ['False', 'False', 'False', 'True', 'True', 'True', 'True', 'True']\n#print(\"Entropia:\", entropy(labels))\nresult = entropy(labels)\nprint(\"Entropia: {result}\")",
        "detail": "entropy",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "entropy",
        "description": "entropy",
        "peekOfCode": "result = entropy(labels)\nprint(\"Entropia: {result}\")",
        "detail": "entropy",
        "documentation": {}
    }
]